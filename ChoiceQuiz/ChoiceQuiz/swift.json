[{"id":0,"text":"varで定義されるのは","code":null,"choice":["⭕️値を変えることができる変数","❌値を変えることができない定数","❌関数","❌プログラム"]},{"id":1,"text":"letで定義されるのは","code":null,"choice":["⭕️値を変えることができない定数","❌値を変えることができる変数","❌関数","❌プログラム"]},{"id":2,"text":"値を変えられる変数を定義するときに使うキーワードは","code":null,"choice":["⭕️var","❌let","❌func","❌return"]},{"id":3,"text":"関数から値を返すために使うキーワードは","code":null,"choice":["⭕️return","❌func","❌var","❌if"]},{"id":4,"text":"整数を表す型は","code":null,"choice":["⭕️Int","❌int","❌x","❌integer"]},{"id":5,"text":"文字列を表す型は","code":null,"choice":["⭕️String","❌s","❌string","❌[s]"]},{"id":6,"text":"オブジェクトを生成するには","code":null,"choice":["⭕️型名(引数)","❌型名[引数]","❌型名{引数}","❌型名 引数"]},{"id":7,"text":"仲間外れは","code":null,"choice":["⭕️var","❌Int","❌[String]","❌Bool"]},{"id":8,"text":"仲間外れは","code":null,"choice":["⭕️1 + 1","❌2.0 * 3.0","❌-4.0","❌7.0","❌1.1 + 1.8 * 2.0"]},{"id":9,"text":"仲間外れは","code":null,"choice":["⭕️var","❌let","❌func","❌return","❌tensuu"]},{"id":10,"text":"複数の値をまとめるXXX。XXXとは","code":null,"choice":["⭕️タプル","❌変数","❌引数","❌型"]},{"id":11,"text":"「Stringのリストのリスト」型になるのは","code":null,"choice":["⭕️[[String]]","❌String[[]]","❌String[][]","❌String([], [])"]},{"id":12,"text":"「Intのリストのリスト」型になるのは","code":null,"choice":["⭕️[[3], [4, 8]]","❌[[10], [1, 11], [0.1]]","❌[0, 1, 0, 1]","❌[0, 1], [0, 1]"]},{"id":13,"text":"Intのリスト(例えばx)にIntを追加する append(_ newElement: Int)の正しい使い方の例は","code":null,"choice":["⭕️x.append(3)","❌x.append(_ newElement: 3)","❌x.append(newElement: 3)","❌x.append(_ newElement: Int 3)"]},{"id":14,"text":"自分で定義した関数 f1(arg: Int)の正しい実行例は","code":null,"choice":["⭕️f1(arg: 2)","❌f1(_ arg: 2)","❌f1(2)","❌f1(arg: Int)"]},{"id":15,"text":"自分で定義した関数 f1(of arg: Int)の正しい実行例は","code":null,"choice":["⭕️f1(of: 2)","❌f1(arg: 2)","❌f1(of arg: 2)","❌f1(of 2)","❌f1(of arg 2)","❌f1(2)"]},{"id":16,"text":"f1(by: true)がエラーでないとする。正しい理解は","code":null,"choice":["⭕️byというのが外部引数名か内部引数名か、どちらなのかはこれだけではわからない","❌引数は2個必要である","❌trueのところをfalseに変えると構文エラーになる","❌byはtrue型である"]},{"id":17,"text":"自分で定義した関数 f(x arg: String)の正しい使い方の例は","code":null,"choice":["⭕️f(x: \"東京\")","❌f(x \"東京\")","❌f(\"東京\")","❌f(x arg: \"東京\")","❌f(arg: \"東京\")"]},{"id":18,"text":"自分で定義した関数 f(arg: String)の正しい使い方の例は","code":null,"choice":["⭕️f(arg: \"東京\")","❌f(arg \"東京\")","❌f(arg String: \"東京\")","❌f(\"東京\")","❌f()","❌f(String)"]},{"id":19,"text":"自分で定義した関数 f(arg: [Bool])の正しい実行例は","code":null,"choice":["⭕️f(arg: Bool)","❌f(arg: [Bool])","❌f(arg: true)","❌f(arg: [])","❌f([false, true])"]},{"id":20,"text":"func f(A B: C) においてAは","code":null,"choice":["⭕️外部引数名に対応する","❌外部変数名に対応する","❌内部引数名に対応する","❌型名に対応する"]},{"id":21,"text":"関数定義 func f(A B: C) においてAは","code":null,"choice":["⭕️引数ラベル","❌関数ラベル","❌変数ラベル","❌型ラベル"]},{"id":22,"text":"関数を定義するときのキーワードは","code":null,"choice":["⭕️func","❌struct","❌let","❌return"]},{"id":23,"text":"関数定義 func f(A B: C) においてBは","code":null,"choice":["⭕️内部引数名","❌外部引数名","❌外部変数名","❌関数名"]},{"id":24,"text":"関数定義 func f(A B: C) においてCは","code":null,"choice":["⭕️型名","❌内部引数名","❌引数ラベル","❌外部変数名"]},{"id":25,"text":"Int型の変数xとDouble型の変数yをエラーなく足すには","code":null,"choice":["⭕️Double(x) + y","❌x + Double(y)","❌x + y","❌Double(x + y)"]},{"id":26,"text":"print(\"40\" + \"8\")の結果は","code":null,"choice":["⭕️408が出力される","❌48が出力される","❌エラーなので実行できない","❌40が出力され、（次の行に）8が出力される"]},{"id":27,"text":"変数xが[9, 8, 25]だとする。x.remove(at: 1)の実行結果は","code":null,"choice":["⭕️xは[9, 25]になる","❌xは[9, 0, 25]になる","❌xは[1, 8, 25]になる","❌xは[8, 25]になる","❌xは[9, 1, 25]になる"]},{"id":28,"text":"var x = 88　だとするとxの型は","code":null,"choice":["⭕️Int型","❌Double型","❌Int型かDouble型か決められないのでエラー","❌Int型かDouble型かまだ決まってないがエラーではない"]},{"id":29,"text":"var x = 165.0 とする。これは身長（センチ）を表す変数である。正しく出力するのは","code":null,"choice":["⭕️print(\"身長は \\(x / 100.0) メートルです\")","❌print(\"身長は \\(x * 100.0) メートルです\")","❌print(\"身長は \\(x) メートルです\")","❌print(\"身長は \\(x / 100) メートルです\")","❌print(\"身長は \\(x * 100) メートルです\")"]},{"id":30,"text":"エラーにならないのは","code":null,"choice":["⭕️var 日本語: Int","❌var \"xy3\": Int","❌var 3xy: Int","❌var x3y[]: Int"]},{"id":31,"text":"list[4] と同じ型になるものは（listの詳細に関する説明はない）","code":null,"choice":["⭕️list[3]","❌list[]","❌list","❌[list]"]},{"id":32,"text":"式展開で文字列(String)中に値を埋め込むのに使うのは","code":null,"choice":["⭕️バックスラッシュ(\\\\)","❌スラッシュ(/)","❌ドル記号($)","❌バッククオート(')"]},{"id":33,"text":"20 % 3 の計算結果は","code":null,"choice":["⭕️2","❌6","❌7","❌6.6666...","❌エラーなのでそもそも計算できない"]},{"id":34,"text":"リスト型の変数xから先頭要素を関数removeFirst()で除きたい。正しいのは","code":null,"choice":["⭕️x.removeFirst()","❌removeFirst(x)","❌x.removeFirst","❌removeFirst(x[0])"]},{"id":35,"text":"エラーにならないのは","code":null,"choice":["⭕️@State var x: Int","❌?State var x: Int","❌State@ var x: Int","❌State var x: Int","❌State(var x: Int)"]},{"id":36,"text":"関数を定義するときに使うキーワードは","code":null,"choice":["⭕️func","❌function","❌f","❌fn"]},{"id":37,"text":"if A { B } else { C }と同じなのは","code":null,"choice":["⭕️A ? B : C","❌A : B ? C","❌A","❌if A else { C } { B }"]},{"id":38,"text":"変数xを、Intのリスト型で、最初は中身は空として定義するのは","code":null,"choice":["⭕️var x: [Int] = []","❌var x: Int = []","❌var x = []","❌var x = 0","❌var x: [Int]"]},{"id":39,"text":"リテラルになっているのは","code":null,"choice":["⭕️10","❌x","❌2 + 8","❌0 * x"]},{"id":40,"text":"リテラルになっているのは","code":null,"choice":["⭕️ab","❌ab","❌a.b","❌a * b"]},{"id":41,"text":"リテラルになっているのは","code":null,"choice":["⭕️true","❌let","❌return","❌View"]},{"id":42,"text":"x = a.b(c: 3) がエラーでないとする。正しいものは","code":null,"choice":["⭕️bはメソッド","❌aは関数","❌bは関数","❌aはメソッド"]},{"id":43,"text":"以下のプログラムがエラーでないとする。もっとも正しいものは","code":"x = y\nx = a.b(c: 3)\n","choice":["⭕️xはvarを使って定義されている","❌xはInt型である","❌aはfuncを使って定義されている","❌xもaもInt型である"]},{"id":44,"text":"以下のプログラムでXXXとは","code":"func f(a: Int, b: Int) XXX {\n  return a < b\n}\n","choice":["⭕️-> Bool","❌=> Bool","❌: Bool","❌Bool"]},{"id":45,"text":"以下のプログラムでXXXとは","code":"func f(a: Int, b: Int) -> [Int] {\n  return XXX\n}\n","choice":["⭕️[a]","❌a + b","❌a < b","❌[Int]"]},{"id":46,"text":"以下のエラーがないプログラムでXXXは","code":"func f(a: Int, b: Int) -> String {\n  return XXX\n}\n","choice":["⭕️\"String\"","❌[a]","❌a + b","❌a < b"]},{"id":47,"text":"以下のエラーがないプログラムでXXXは","code":"func f(a: Int) -> String {\n  return XXX\n}\n","choice":["⭕️String(a)","❌String","❌Int -> String","❌String[]"]},{"id":48,"text":"以下の関数fを使う（呼び出す）ときに指定すべき引数の数は","code":"func f(a: Int, b: Int) {\n  ...\n}\n","choice":["⭕️2個","❌4個","❌何個でもよい","❌0個"]},{"id":49,"text":"以下の関数fを使うときに指定すべき引数の数は","code":"func f(_ b: Int) {\n  ...\n}\n","choice":["⭕️1個","❌2個","❌3個","❌4個"]},{"id":50,"text":"以下の関数fを使うときに指定すべき引数の数は","code":"func f(first a: Int, second b: Int) {\n  ...\n}\n","choice":["⭕️2個","❌4個","❌6個","❌8個"]},{"id":51,"text":"関数呼び出し f(3) における引数の数は","code":null,"choice":["⭕️1個","❌0個","❌2個","❌3個"]},{"id":52,"text":"関数呼び出し f(true, true, true) における引数の数は","code":null,"choice":["⭕️3個","❌1個","❌2個","❌0個"]},{"id":53,"text":"関数呼び出し f(from: 1, to: 9) における引数の数は","code":null,"choice":["⭕️2個","❌4個","❌9個","❌1から9個"]},{"id":54,"text":"関数呼び出し f(at: 1) における引数の数は","code":null,"choice":["⭕️1個","❌2個","❌3個","❌0個"]},{"id":55,"text":"x = a.b(c: 3) がエラーでないとする。もっともありえるのは","code":null,"choice":["⭕️x = a.b(c: 3 + 1) もエラーにならない","❌a = x.b(c: 3) もエラーにならない","❌x = a.b(3) もエラーにならない","❌x = a.b(c: 3.0) もエラーにならない"]},{"id":56,"text":"x = a.b(c: 3) がエラーでないとする。正しいものは","code":null,"choice":["⭕️3は引数（パラメータ）","❌cは引数（パラメータ）","❌bは引数（パラメータ）","❌aは引数（パラメータ）"]},{"id":57,"text":"型を自動認識するXXX。XXXとは","code":null,"choice":["⭕️型推論","❌型認識","❌型計算","❌計算型"]},{"id":58,"text":"以下のプログラムでa, b, cの点数の合計を計算するのは","code":"struct Person {\n   var name: String\n   var 点数: Int\n   var email: String\n}\nvar a: Person = Person(XXX)\nvar b: Person = Person(YYY)\nvar c: Person = Person(ZZZ)\n","choice":["⭕️a.点数 + b.点数 + c.点数","❌a + b + c","❌点数 + 点数 + 点数","❌Person(XXX) + Person(YYY) + Person(ZZZ)"]},{"id":59,"text":"以下のプログラムでXXXの正しい例は","code":"struct Person {\n   var name: String\n   var 点数: Int\n   var email: String\n}\nvar a: Person = XXX\n","choice":["⭕️Person(name: \"namae\", 点数: 90, email: \"aaa@cccc.dd\")","❌namae","❌Person(\"namae\", 80, \"aaa@cccc.dd\")","❌struct Person { var name: String var 点数: Int var email: String }"]},{"id":60,"text":"\"3.2\"の型は","code":null,"choice":["⭕️String","❌Int","❌Double","❌\"Double\""]},{"id":61,"text":"\"10\"の型は","code":null,"choice":["⭕️String","❌Int","❌Double","❌\"10\""]},{"id":62,"text":"3 * 8 の型は","code":null,"choice":["⭕️Int","❌24","❌Double","❌String"]},{"id":63,"text":"3 < 8 の型は","code":null,"choice":["⭕️Bool","❌Int","❌Int < Int","❌Bool < Bool"]}]
